#2
import ipaddress
from itertools import *
def f(x,y,w,z,):
    return (not x and y and z and not w) or (not x and y and not z and not w) or (x and y and z and not w)
for a1,a2,a3,a4,a5,a6,a7 in product([0,1], repeat=7):
    t = [(1,a1,a2,a3),
         (0,a4,1,a5),
         (a6,0,0,a7)]
    if len(t)==len(set(t)):
        for i in permutations ('wzxy'):
            if [f(**dict(zip(i,r))) for r in t] == [1,1,1]:
                print('2-',*i,sep='')
#5
for n in range(1,500):
    r = str(bin(n)[2::])
    r = r + str((sum(map(int, r))) % 2)
    r = r + str((sum(map(int, r))) % 2)
    R = int(r,2)
    if R > 123:
        print('5-',R)
        break
'''#6
from turtle import *
tracer(0)
k = 10
for i in range(2):
    fd(6 * k)
    rt(90)
    fd(12 * k)
    rt(90)
up()
fd(1 * k)
rt(90)
fd(3 * k)
lt(90)
down()
for i in range(2):
    fd(77 * k)
    rt(90)
    fd(45* k)
    rt(90)
up()
for x in range(-30,30):
    for y in range(-30,30):
        goto(x * k,y*k)
        dot(3,'blue')

done()
update()
'''
print('6-', 28)
#8
from itertools import *
k = 0
for i in product('0123456789ABCD',repeat=5):
    s = ''.join(i)
    if s[0]!='0':
        if s.count('9')==1 and (s.count('B') + s.count('C') + s.count('D'))<=3:
            k +=1
print('8-',k)
#12
s = '9'* 136
while '22222' in s or '9999' in s:
    s = s.replace('22222','99',1).replace('9999','2',1)

print('12-',s)
#13
'''k=0
from ipaddress import *
n = ipaddress.ip_network(f'94.253.128.0/255.255.128.0.',False)
for i in n:
    ip = f'{i:b}'
    ip2 = bin(ip)[2::]
    if ip.count('1') %6 != 0 and ip2 % 1000 == 101:
        k+=1
print('13-',k) '''
#14
'''
def ss(n,b):
    s = ''
    while n > 0:
        s += str(n % b)
        n //= b
    return s
mx =0
for x in range(10,70001):
    n = 5 ** 2025 + 5 ** 400 - x
    s = ss(n,5)
    cnt4 = int(s.count('4'))
    if mx < cnt4 and mx != cnt4:
        mx +=cnt4
    else:
        print(mx)'''
#15
mx= 0
def f15(x,a):
    return (x % 33 == 0) <= ((x % a !=0) <= (x % 242 !=0))
for a in range(1,1000):
    if all(f15(x,a) for x in range(1,1000)):
        mx = max(mx, a)
print(mx)
#16
def f16(n):
    if n < 3:
        return 1
    elif n > 2:
        return f16((n + 1) // 2) + 1
print(f16(2025))
